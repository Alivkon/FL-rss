#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FL.ru RSS Parser –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
"""

import asyncio
import logging
import os
import subprocess
import sys
import signal
import psutil
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import schedule
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
parser_process = None
scheduler_task = None
authorized_users = set()  # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

# –§–∞–π–ª—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
PID_FILE = "parser.pid"
STATUS_FILE = "parser_status.txt"

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FL.ru RSS Parser –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.\n"
                                      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º.")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if os.path.exists(STATUS_FILE):
        with open(STATUS_FILE, "r") as f:
            status = f.read()
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞:\n```\n{status}\n```", parse_mode="Markdown")
    else:
        await update.message.reply_text("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs"""
    if os.path.exists("parser.log"):
        with open("parser.log", "r") as f:
            logs = f.read()
        await update.message.reply_text(f"–õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞:\n```\n{logs}\n```", parse_mode="Markdown")
    else:
        await update.message.reply_text("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

async def auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /auth"""
    user_id = update.message.from_user.id
    if user_id not in authorized_users:
        authorized_users.add(user_id)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º.")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_parser":
        await start_parser(query.message, context)
    elif query.data == "stop_parser":
        await stop_parser(query.message, context)
    elif query.data == "restart_parser":
        await restart_parser(query.message, context)
    elif query.data == "view_status":
        await view_status(query.message, context)

async def start_parser(message, context):
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    global parser_process
    if parser_process is None or not psutil.pid_exists(parser_process.pid):
        parser_process = subprocess.Popen([sys.executable, "parser_script.py"])
        with open(PID_FILE, "w") as f:
            f.write(str(parser_process.pid))
        await message.reply_text("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    else:
        await message.reply_text("–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

async def stop_parser(message, context):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    global parser_process
    if parser_process is not None and psutil.pid_exists(parser_process.pid):
        os.kill(parser_process.pid, signal.SIGTERM)
        parser_process = None
        os.remove(PID_FILE)
        await message.reply_text("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.reply_text("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

async def restart_parser(message, context):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
    await stop_parser(message, context)
    await start_parser(message, context)

async def view_status(message, context):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    if os.path.exists(STATUS_FILE):
        with open(STATUS_FILE, "r") as f:
            status = f.read()
        await message.reply_text(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞:\n```\n{status}\n```", parse_mode="Markdown")
    else:
        await message.reply_text("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("TELEGRAM_TOKEN=your_bot_token_here")
        print("TELEGRAM_CHAT_ID=your_chat_id_here")
        return
    
    if not TELEGRAM_CHAT_ID:
        print("‚ùå TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("logs", logs_command))
    application.add_handler(CommandHandler("auth", auth_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ FL.ru RSS Parser Manager Bot –∑–∞–ø—É—â–µ–Ω...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()