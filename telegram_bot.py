#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö FL.ru
"""

import configparser
import os
import logging
from typing import Set
import asyncio
from telegram import Bot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, token: str, chat_id: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(token=token)
        self.chat_id = chat_id
        self.keywords = self.load_keywords()
        self.stopwords = self.load_stopwords()
    
    def load_keywords(self, file_path: str = "filterList.ini") -> Set[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        keywords = set()
        
        if not os.path.exists(file_path):
            logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return keywords
        
        try:
            config = configparser.ConfigParser()
            config.read(file_path, encoding='utf-8')
            
            if 'keywords' in config:
                for key, value in config['keywords'].items():
                    if value.strip():
                        keywords.add(value.strip().lower())
            
            # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è [keywords] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if not keywords:
                with open(file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and not line.startswith('['):
                            keywords.add(line.lower())
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        return keywords
    
    def load_stopwords(self, file_path: str = "stopwords.ini") -> Set[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        stopwords = set()
        
        if not os.path.exists(file_path):
            logger.warning(f"–§–∞–π–ª —Å—Ç–æ–ø-—Å–ª–æ–≤ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return stopwords
        
        try:
            config = configparser.ConfigParser()
            config.read(file_path, encoding='utf-8')
            
            if 'stopwords' in config:
                for key, value in config['stopwords'].items():
                    if value.strip():
                        stopwords.add(value.strip().lower())
            
            # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è [stopwords] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            if not stopwords:
                with open(file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and not line.startswith('['):
                            stopwords.add(line.lower())
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–æ–ø-—Å–ª–æ–≤: {e}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stopwords)} —Å—Ç–æ–ø-—Å–ª–æ–≤")
        return stopwords
    
    def check_keywords_in_text(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not text or not self.keywords:
            return False
        
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in self.keywords)
    
    def check_stopwords_in_text(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ"""
        if not text or not self.stopwords:
            return False
        
        text_lower = text.lower()
        found_stopwords = [word for word in self.stopwords if word in text_lower]
        
        if found_stopwords:
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: {found_stopwords}")
            return True
        
        return False
    
    def should_notify(self, title: str, description: str, category: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        if self.check_stopwords_in_text(title) or self.check_stopwords_in_text(description):
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏: {title[:50]}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é 5
        if category == 5:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
        if self.check_keywords_in_text(title) or self.check_keywords_in_text(description):
            return True
        
        return False
    
    def format_message(self, title: str, description: str, link: str, pub_date: str, category: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã
        max_desc_length = 300
        if description and len(description) > max_desc_length:
            description = description[:max_desc_length] + "..."
        
        message = f"üÜï <b>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç FL.ru</b>\n\n"
        message += f"üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n\n"
        
        if description:
            message += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        
        message += f"üè∑ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        
        if pub_date:
            message += f"üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {pub_date}\n"
        
        message += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link}"
        
        return message
    
    async def send_notification(self, title: str, description: str, link: str, pub_date: str, category: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            message = self.format_message(title, description, link, pub_date, category)
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def notify_if_needed(self, title: str, description: str, link: str, pub_date: str, category: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if self.should_notify(title, description, category):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.send_notification(title, description, link, pub_date, category))
                loop.close()
                return True  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                return False
        return False  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_telegram_notifier = None

def get_telegram_notifier():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è"""
    global _telegram_notifier
    
    if _telegram_notifier is None:
        try:
            from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID
            
            if TELEGRAM_TOKEN and TELEGRAM_CHAT_ID:
                _telegram_notifier = TelegramNotifier(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
                logger.info("Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except ImportError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
    
    return _telegram_notifier


def send_telegram_notification(title: str, description: str, link: str, pub_date: str, category: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    notifier = get_telegram_notifier()
    if notifier:
        return notifier.notify_if_needed(title, description, link, pub_date, category)
    return False


async def test_bot():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
    notifier = get_telegram_notifier()
    if not notifier:
        print("Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        await notifier.bot.send_message(
            chat_id=notifier.chat_id,
            text="ü§ñ Telegram –±–æ—Ç FL.ru –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        )
        print("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    asyncio.run(test_bot())