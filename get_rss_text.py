#!/usr/bin/env python3
"""
FL.ru RSS Parser

–ü–∞—Ä—Å–µ—Ä RSS-–ª–µ–Ω—Ç—ã —Å —Å–∞–π—Ç–∞ FL.ru –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫ –≤ 9:00, –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –¥–æ 17:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
"""

import requests
import xml.etree.ElementTree as ET
from datetime import datetime, time
import sys
import os
import time as time_module
import random
import schedule
import signal

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import (
    USER_AGENT, COOKIES, REQUEST_TIMEOUT,
    DISPLAY_DATE_FORMAT
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database import RSSDatabase

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
from telegram_bot import send_telegram_notification

# –ë–∞–∑–æ–≤—ã–π URL RSS-–ª–µ–Ω—Ç—ã
RSS_BASE_URL = "https://www.fl.ru/rss/all.xml?category="

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
headers = {
    "User-Agent": USER_AGENT,
    "Cookie": COOKIES
}

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
running = True


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global running
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
    running = False


def get_rss_data(url):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ RSS-–ª–µ–Ω—Ç—ã"""
    try:
        response = requests.get(url, headers=headers, timeout=REQUEST_TIMEOUT)
        return response
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def load_included_categories(file_path="included_categories.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    included = set()
    
    if not os.path.exists(file_path):
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥—É—Ç –æ–ø—Ä–æ—à–µ–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return set(range(1, 11))  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if line and not line.startswith('#'):
                    try:
                        category = int(line)
                        included.add(category)
                    except ValueError:
                        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{line}' –≤ —Ñ–∞–π–ª–µ {file_path}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return included


def process_rss_item(item, category, database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç RSS –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    title_elem = item.find('title')
    description_elem = item.find('description')
    link_elem = item.find('link')
    pub_date_elem = item.find('pubDate')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    title = title_elem.text if title_elem is not None else ""
    description = description_elem.text if description_elem is not None else ""
    link = link_elem.text if link_elem is not None else ""
    pub_date = pub_date_elem.text if pub_date_elem is not None else ""
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    if description:
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}{'...' if len(description) > 100 else ''}")
    print(f"–°—Å—ã–ª–∫–∞: {link}")
    if pub_date:
        print(f"–î–∞—Ç–∞: {pub_date}")
    print('-' * 40)
    
    telegram_sent = False  # –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if link:  # –°—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        success = database.add_item(title, description, link, pub_date, category)
        if success:
            print(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {title[:50]}{'...' if len(title) > 50 else ''}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            try:
                telegram_sent = send_telegram_notification(title, description, link, pub_date, category)
                if telegram_sent:
                    print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏
                    from telegram_bot import get_telegram_notifier
                    notifier = get_telegram_notifier()
                    if notifier and (notifier.check_stopwords_in_text(title) or notifier.check_stopwords_in_text(description)):
                        print(f"üö´ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
        else:
            print(f"‚ö† –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {title[:50]}{'...' if len(title) > 50 else ''}")
    
    return telegram_sent


def parse_rss():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS"""
    print(f"\n{'='*80}")
    print(f"üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê FL.ru - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*80}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = RSSDatabase()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    included_categories = load_included_categories()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    if included_categories:
        print(f"–í–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {sorted(included_categories)}")
    else:
        print("–í–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë—É–¥—É—Ç –æ–ø—Ä–æ—à–µ–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        included_categories = set(range(1, 11))  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stats = db.get_statistics()
    if stats:
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_items', 0)}")
        print(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', '–ù–∏–∫–æ–≥–¥–∞')}")
    
    total_new_items = 0
    total_telegram_sent = 0  # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category in sorted(included_categories):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if category < 0 or category > 42:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1-42)")
            continue
        
        print(f"\n{'='*60}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} - {datetime.now().strftime(DISPLAY_DATE_FORMAT)}")
        print(f"URL: {RSS_BASE_URL}{category}")
        print('='*60)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ RSS-–ª–µ–Ω—Ç—ã
        response = get_rss_data(f"{RSS_BASE_URL}{category}")
        
        if response is None:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
            continue
        
        print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            try:
                root = ET.fromstring(response.content)
                items_count = 0
                new_items_count = 0
                telegram_sent_count = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
                for item in root.findall('.//item'):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                    old_total = db.get_statistics().get('total_items', 0)
                    telegram_sent = process_rss_item(item, category, db)
                    new_total = db.get_statistics().get('total_items', 0)
                    
                    if new_total > old_total:
                        new_items_count += 1
                    
                    if telegram_sent:
                        telegram_sent_count += 1
                    
                    items_count += 1
                
                print(f"\n{'='*40}")
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count}")
                print(f"–ù–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ë–î: {new_items_count}")
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {telegram_sent_count}")
                print(f"{'='*40}")
                
                total_new_items += new_items_count
                total_telegram_sent += telegram_sent_count
                print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {items_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–æ–≤—ã—Ö –≤ –ë–î: {new_items_count}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {telegram_sent_count}")
                
            except ET.ParseError as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}"
                print(error_msg)
                
        else:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (HTTP {response.status_code}). –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Å–∞–π—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤."
            print(error_msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–æ—Ç 60 –¥–æ 360 —Å–µ–∫—É–Ω–¥)
        if category != max(included_categories):  # –ù–µ –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            delay = random.uniform(60, 360) 
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")
            time_module.sleep(delay)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    final_stats = db.get_statistics()
    print(f"\n{'='*60}")
    print("‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
    print(f"–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {total_new_items}")
    print(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {total_telegram_sent}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {final_stats.get('total_items', 0)}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db.db_path}")
    print(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedule.next_run()}")
    print(f"{'='*60}")


def setup_schedule():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 9:00, 11:00, 13:00, 15:00, 17:00
    schedule.every().day.at("09:00").do(parse_rss)
    schedule.every().day.at("11:00").do(parse_rss)
    schedule.every().day.at("13:00").do(parse_rss)
    schedule.every().day.at("15:00").do(parse_rss)
    schedule.every().day.at("17:00").do(parse_rss)
    
    print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
    print("   - 09:00 (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)")
    print("   - 11:00 (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)")
    print("   - 13:00 (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)")
    print("   - 15:00 (—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞)")
    print("   - 17:00 (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫)")
    print(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {schedule.next_run()}")


def run_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global running
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    setup_schedule()
    
    print(f"\nü§ñ FL.ru RSS Parser –∑–∞–ø—É—â–µ–Ω - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
    current_time = datetime.now().time()
    work_start = time(9, 0)
    work_end = time(17, 30)
    
    if work_start <= current_time <= work_end:
        print("\n‚è∞ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ...")
        parse_rss()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    while running:
        try:
            schedule.run_pending()
            time_module.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except KeyboardInterrupt:
            running = False
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time_module.sleep(60)
    
    print("\nüëã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
        print("üîÑ –†–µ–∂–∏–º –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        parse_rss()
    else:
        # –†–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print("‚è∞ –†–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        run_scheduler()


if __name__ == "__main__":
    main()